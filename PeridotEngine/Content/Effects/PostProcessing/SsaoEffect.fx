#if OPENGL
	#define SV_POSITION POSITION
	#define VS_SHADERMODEL vs_3_0
	#define PS_SHADERMODEL ps_3_0
#else
	#define VS_SHADERMODEL vs_4_0
	#define PS_SHADERMODEL ps_4_0
#endif

#include "../Macros.fxh"

float NearPlane;
float FarPlane;

matrix Projection;
matrix InverseProjection;

DECLARE_TEXTURE(DepthTexture, 1);
DECLARE_TEXTURE(NormalTexture, 2);

#define KERNEL_SIZE 256
static float3 ssaoKernel[256] = {
float3(0.0046310043f, 0.05853547f, 0.08096234f),float3(0.03792528f, 0.09230973f, 0.007181669f),float3(0.05796072f, -0.04100109f, -0.07059886f),float3(-0.05358233f, 0.07475495f, 0.039807335f),
float3(0.050963428f, -0.047581226f, -0.07216327f),float3(0.065452315f, 0.07202317f, 0.025055539f),float3(0.0070294556f, -0.09658707f, 0.027505647f),float3(-0.036879357f, -0.09387247f, 0.0021037115f),
float3(-0.06819435f, 0.07126442f, -0.02224013f),float3(-0.06853149f, -0.021944767f, -0.07140312f),float3(0.07720898f, 0.06593733f, 0.005112667f),float3(-0.03502032f, -0.031987246f, -0.0902763f),
float3(-0.008042619f, 0.082598194f, 0.05985328f),float3(0.038347043f, -0.017919261f, -0.0935627f),float3(-0.057831563f, 0.048406873f, 0.07028381f),float3(0.06424719f, -0.03605795f, 0.07271592f),
float3(-0.07337801f, 0.07204606f, -0.015314861f),float3(0.03166783f, 0.05464322f, 0.0831923f),float3(-0.08612396f, 0.059865583f, 0.0038562238f),float3(0.09568804f, 0.003444701f, -0.04428027f),
float3(0.0249392f, -0.025031127f, -0.099997f),float3(0.058428135f, 0.084408835f, 0.028893368f),float3(-0.08312602f, -0.06703049f, -0.0101339165f),float3(-0.06355936f, -0.08569821f, -0.016143944f),
float3(-0.06433106f, -0.056954656f, -0.0663925f),float3(0.07078836f, -0.015093389f, -0.08187838f),float3(0.031033434f, -0.104494214f, 0.01484483f),float3(-0.098650284f, 0.021020299f, 0.045776717f),
float3(-0.044270236f, -0.095858015f, -0.035981294f),float3(0.022927865f, 0.10224207f, -0.040565457f),float3(0.08330838f, -0.040499702f, -0.065062456f),float3(-0.06854306f, 0.075744614f, 0.050743043f),
float3(-0.09216967f, 0.06770584f, 0.011634253f),float3(0.023422107f, 0.0047245314f, -0.11338499f),float3(-0.059351426f, 0.09195946f, 0.040846467f),float3(0.08353408f, -0.08007035f, 0.022071084f),
float3(-0.032440837f, 0.10142511f, -0.0526694f),float3(0.030131474f, -0.11595392f, -0.0024678118f),float3(0.048401285f, 0.09337855f, 0.0595954f),float3(0.0007458726f, -0.121923774f, 0.00337163f),
float3(0.077396505f, -0.04158497f, 0.08619974f),float3(-0.056170385f, -0.07920463f, -0.077481166f),float3(0.07978067f, 0.08263141f, -0.050301977f),float3(-0.045776248f, -0.10540002f, 0.053100068f),
float3(-0.08530618f, 0.032253176f, 0.08954197f),float3(-0.07976953f, 0.07381797f, 0.069598235f),float3(-0.026926568f, 0.055621758f, 0.114754744f),float3(0.021990761f, -0.025361773f, -0.12728882f),
float3(0.12504114f, 0.02159498f, 0.03975061f),float3(0.06605746f, -0.09520752f, 0.06794925f),float3(-0.07009086f, 0.026854198f, -0.11307454f),float3(0.13264574f, -0.022865005f, -0.02622929f),
float3(0.095517024f, -0.100267366f, -0.0051178206f),float3(0.07568389f, -0.09336382f, 0.07188736f),float3(0.015327333f, 0.04601937f, -0.13297158f),float3(-0.12960343f, 0.05170437f, -0.031584915f),
float3(0.055587072f, -0.0073095183f, 0.13330822f),float3(0.011867029f, 0.011564419f, 0.14525548f),float3(0.120737866f, 0.003997679f, 0.08516153f),float3(-0.020120665f, -0.123252325f, 0.08207241f),
float3(-0.031749077f, 0.10136734f, -0.10746123f),float3(0.07474233f, 0.049045f, 0.1239062f),float3(0.010764192f, 0.15370716f, -0.011415911f),float3(-0.04374613f, -0.107359774f, -0.10475791f),
float3(0.13287129f, -0.08456507f, 0.012836543f),float3(-0.11052674f, 0.10211262f, -0.053846683f),float3(0.104411006f, -0.0035519109f, 0.12335108f),float3(-0.08953144f, -0.13666624f, 0.006247658f),
float3(0.048248835f, 0.10646257f, 0.11700045f),float3(0.10565704f, 0.11031027f, -0.06822463f),float3(-0.046943724f, 0.08876455f, -0.13621718f),float3(0.05622671f, -0.08006759f, 0.14047858f),
float3(-0.13377546f, -0.046670232f, 0.09959044f),float3(-0.13014868f, -0.037678584f, -0.11107286f),float3(-0.029471021f, 0.088612355f, -0.15065199f),float3(-0.102153555f, 0.10302236f, -0.105390586f),
float3(-0.1113236f, 0.049348947f, -0.13448359f),float3(-0.133705f, -0.028868629f, -0.1223951f),float3(0.1020108f, 0.13573633f, -0.07521017f),float3(-0.018662045f, -0.1296321f, 0.13472243f),
float3(0.07279621f, -0.14075331f, -0.105013564f),float3(-0.13738301f, -0.13069618f, -0.032235354f),float3(0.024317302f, -0.19256638f, 0.014083658f),float3(-0.11328936f, 0.0957251f, 0.12950525f),
float3(-0.08895519f, 0.051172968f, -0.17075428f),float3(0.13633502f, 0.14424892f, -0.035141405f),float3(-0.14767848f, 0.103474505f, 0.095275424f),float3(-0.03064281f, 0.101620235f, -0.17695676f),
float3(-0.103256084f, 0.07969635f, 0.16301866f),float3(-0.14702109f, 0.038062867f, 0.14682269f),float3(0.20361027f, 0.063548096f, 0.01347908f),float3(-0.09861316f, -0.14396742f, -0.1276971f),
float3(0.14449102f, -0.14501701f, 0.07717068f),float3(-0.116472095f, 0.17512529f, 0.06898225f),float3(-0.023775097f, 0.185611f, -0.12301304f),float3(-0.12739618f, -0.15697953f, -0.10226534f),
float3(-0.15959983f, 0.098311886f, -0.13191374f),float3(0.21535738f, -0.07599827f, -0.040234696f),float3(0.15069117f, -0.12064015f, 0.13331741f),float3(0.11019114f, 0.19999035f, -0.064706005f),
float3(0.009676716f, -0.17250231f, 0.1667101f),float3(0.116223186f, 0.09359343f, -0.19162925f),float3(-0.23737527f, -0.020442527f, -0.05999883f),float3(-0.12081199f, 0.15790129f, 0.14913541f),
float3(0.17697002f, -0.027172932f, -0.17648762f),float3(0.111157835f, -0.16033386f, 0.1631165f),float3(0.19008651f, -0.13918222f, -0.103255555f),float3(-0.2340447f, 0.113547824f, -0.0048918976f),
float3(0.15782174f, 0.15692337f, -0.14043114f),float3(0.17761976f, -0.029522188f, 0.1960234f),float3(0.11238856f, 0.20837405f, -0.12813833f),float3(-0.024523979f, -0.23847489f, 0.12906149f),
float3(-0.21257374f, -0.15189336f, 0.08695665f),float3(0.09869825f, -0.15406856f, 0.20992544f),float3(-0.0647759f, -0.091673695f, 0.25828f),float3(-0.048987243f, 0.22988613f, 0.16080421f),
float3(-0.23462583f, 0.16682282f, 0.007679515f),float3(0.13854323f, 0.16958517f, -0.19197392f),float3(0.05267956f, 0.26469916f, 0.11778294f),float3(0.20569634f, 0.21040489f, 0.045565005f),
float3(-0.1528857f, 0.25815552f, -0.024918742f),float3(0.2284532f, -0.18847905f, 0.07031722f),float3(-0.1893926f, 0.15316437f, -0.18812369f),float3(-0.16018267f, -0.25022054f, 0.092466384f),
float3(0.12054921f, 0.070281036f, 0.28193435f),float3(-0.2760366f, -0.102941394f, 0.11977449f),float3(0.25062138f, 0.19371338f, 0.0550006f),float3(-0.1982542f, 0.23666383f, 0.10154066f),
float3(0.067191996f, -0.17375797f, 0.27060106f),float3(0.2152194f, -0.1360214f, 0.21321355f),float3(-0.24196026f, -0.1525622f, 0.17565499f),float3(0.18614988f, 0.1798722f, 0.21933222f),
float3(0.19347903f, -0.25132644f, -0.13036865f),float3(0.03356434f, -0.1524466f, 0.30944598f),float3(0.23580465f, 0.037007526f, -0.25636744f),float3(-0.17355554f, 0.076028585f, -0.29902658f),
float3(0.28504628f, -0.20732097f, -0.061268434f),float3(0.2201249f, 0.26237646f, -0.11578952f),float3(0.22450586f, 0.2878527f, 0.014371572f),float3(0.14104478f, 0.09600928f, -0.3273705f),
float3(0.3055118f, -0.18657114f, -0.104884006f),float3(-0.13267969f, -0.3446467f, -0.07534063f),float3(-0.21985789f, -0.2046767f, 0.23408778f),float3(0.17672165f, 0.32531136f, -0.1048169f),
float3(-0.15428603f, 0.32068014f, -0.15644331f),float3(-0.16922581f, 0.26841396f, -0.23141733f),float3(0.2643543f, 0.13708977f, -0.26217794f),float3(0.22933713f, 0.2606607f, -0.20026398f),
float3(-0.28231815f, -0.22533374f, -0.18290024f),float3(-0.30047596f, -0.27144215f, -0.057502583f),float3(0.25646585f, -0.32005394f, 0.049620803f),float3(0.32347697f, -0.09955153f, -0.24408814f),
float3(0.096954666f, -0.30023426f, 0.27946243f),float3(0.32315576f, -0.14647852f, -0.23521508f),float3(0.2549094f, -0.0074104615f, -0.34613407f),float3(0.3083715f, 0.24008141f, 0.1892118f),
float3(0.14042689f, -0.20483044f, -0.36139897f),float3(0.09798102f, -0.13526836f, 0.41012087f),float3(-0.32339424f, -0.28626567f, -0.11592913f),float3(-0.017455824f, 0.3094393f, -0.3284072f),
float3(-0.31591645f, -0.3281047f, 0.021294046f),float3(0.22377515f, -0.004871908f, -0.402337f),float3(0.31012508f, -0.29432288f, -0.18248369f),float3(-0.11745338f, 0.24081022f, 0.38537544f),
float3(-0.06676854f, 0.10870767f, -0.45638296f),float3(-0.20052575f, -0.27352494f, -0.33743602f),float3(0.031719718f, -0.30258438f, 0.37513036f),float3(0.3379332f, -0.21392797f, -0.27890393f),
float3(0.18330641f, -0.41761452f, 0.18515658f),float3(0.11132733f, 0.32352194f, 0.36032012f),float3(0.039526496f, -0.45902386f, 0.19824532f),float3(-0.43145868f, -0.26126987f, 0.04353478f),
float3(0.285523f, -0.3554892f, 0.23073274f),float3(-0.22061379f, 0.35110235f, 0.30672985f),float3(-0.1986903f, -0.2650757f, 0.40156022f),float3(-0.26648143f, -0.40090385f, -0.2104735f),
float3(0.20512515f, 0.3013285f, 0.38506818f),float3(0.3432126f, -0.3378925f, -0.23319565f),float3(-0.3895024f, 0.32977468f, 0.17650485f),float3(-0.10758026f, 0.5199502f, 0.12265698f),
float3(-0.34108835f, 0.28087375f, 0.32735756f),float3(-0.30938393f, 0.302301f, -0.3475592f),float3(-0.41267732f, -0.264814f, 0.2702973f),float3(0.52361566f, 0.06154689f, 0.20297126f),
float3(-0.2531225f, -0.11119647f, -0.49847218f),float3(-0.1774821f, -0.17010216f, -0.5199132f),float3(-0.47332257f, -0.103325054f, -0.31929928f),float3(-0.31418347f, 0.26249915f, 0.41838735f),
float3(-0.2117741f, -0.3247693f, 0.44545466f),float3(0.41847646f, 0.1022776f, -0.4115148f),float3(-0.01875301f, 0.073665805f, 0.59616363f),float3(0.43910435f, -0.06331293f, 0.41318023f),
float3(-0.22522046f, -0.55387634f, -0.12835301f),float3(0.55703026f, 0.08071196f, -0.2524065f),float3(-0.20098701f, 0.35175607f, 0.47222576f),float3(-0.47122726f, 0.37943092f, -0.16677228f),
float3(-0.32640395f, -0.4510104f, 0.3011463f),float3(-0.5111642f, 0.030013371f, -0.38124248f),float3(0.13451283f, 0.3626604f, -0.5146939f),float3(-0.4262347f, 0.46536586f, -0.15287383f),
float3(-0.059906866f, -0.4560792f, -0.4660435f),float3(0.44345957f, 0.3490735f, -0.3428754f),float3(-0.3252226f, 0.28668702f, 0.5054597f),float3(0.48965666f, 0.45946464f, 0.0072586956f),
float3(0.45422086f, 0.49958122f, 0.05100019f),float3(0.1324813f, 0.43440324f, -0.50982064f),float3(-0.23373848f, -0.5056188f, -0.40455848f),float3(0.059199918f, -0.49832067f, -0.4795864f),
float3(0.22227667f, -0.40261343f, 0.52755064f),float3(0.4315752f, 0.4486964f, 0.33213836f),float3(0.116140656f, 0.0033254293f, -0.70185065f),float3(-0.25148723f, 0.45722622f, -0.49202767f),
float3(0.46674427f, -0.32287169f, -0.44799837f),float3(0.6570882f, -0.29982337f, -0.09825589f),float3(0.23929094f, 0.58683825f, -0.3718835f),float3(0.58293146f, -0.28931278f, -0.35377818f),
float3(-0.50761205f, 0.06833384f, 0.54330015f),float3(-0.1882287f, -0.55775356f, -0.4689905f),float3(-0.2174025f, -0.6510644f, 0.32309797f),float3(-0.53095025f, 0.0053276583f, -0.55026174f),
float3(-0.36574417f, 0.06014196f, -0.6757495f),float3(0.42564973f, -0.64981276f, 0.0018972084f),float3(0.12946185f, -0.6365265f, -0.4370851f),float3(-0.47702035f, 0.58402336f, 0.23235291f),
float3(0.5915581f, 0.19947313f, 0.49260333f),float3(0.4983626f, -0.60104597f, 0.18070939f),float3(0.753105f, 0.060260125f, -0.28546292f),float3(0.7666395f, -0.036029384f, 0.27089718f),
float3(-0.32179362f, 0.06383433f, 0.7516973f),float3(-0.25146857f, 0.058400024f, 0.7851161f),float3(0.6247116f, -0.44711584f, 0.32153034f),float3(0.5132258f, -0.515722f, 0.41811466f),
float3(0.65497273f, -0.062191833f, -0.5311222f),float3(-0.4622463f, 0.3892172f, 0.6005604f),float3(-0.56808007f, -0.5294173f, -0.3658593f),float3(0.22789592f, 0.27791357f, 0.7866539f),
float3(-0.24757235f, 0.73317486f, 0.4005464f),float3(-0.21102463f, -0.8220541f, 0.22445758f),float3(-0.6180793f, 0.62615603f, 0.09020163f),float3(-0.43683434f, -0.37014928f, -0.6826962f),
float3(-0.70648026f, 0.10996626f, 0.542694f),float3(-0.5942036f, -0.5511832f, -0.40099216f),float3(0.7043533f, -0.57596153f, 0.043820307f),float3(0.5955386f, 0.41043556f, 0.5646865f),
float3(0.6927771f, -0.51211894f, 0.33489957f),float3(0.15299162f, 0.4416063f, -0.80526495f),float3(0.40682086f, 0.44021356f, -0.7212738f),float3(0.5217141f, -0.77384555f, 0.14594966f),
float3(-0.6039775f, 0.731722f, -0.07112813f),float3(-0.62079483f, -0.020039275f, -0.72977f),float3(-0.13952695f, -0.5541912f, -0.77781135f),float3(-0.38389415f, -0.13232894f, 0.88322276f),
float3(-0.57014936f, -0.6365691f, 0.47771227f),float3(-0.7148695f, 0.33600238f, -0.590123f),float3(-0.7118096f, 0.6701042f, 0.17407385f),float3(0.008283426f, 0.09888258f, -0.01239436f)
};


float4 uvToProjPos(float2 uv)
{
	float depth = SAMPLE_TEXTURE(DepthTexture, saturate(uv)).r;
	float4 pos = float4(
		map(uv.x, 0, 1, -1, 1),
		map(uv.y, 0, 1, -1, 1),
		depth,
		1
	);
	return pos;
}

float2 projPosToUv(float3 projPos) {
	return float2(
		map(projPos.x, -1, 1, 0, 1),
		map(projPos.y, -1, 1, 0, 1)
	);	
}

float depthToAbsolute(float depth) {
	float rel = (2.0f * NearPlane) / (FarPlane + NearPlane - depth * (FarPlane - NearPlane));
    float abs = (FarPlane - NearPlane) * rel + NearPlane;
	return abs;
}

float gauss(float x, float sigma) {
	return (1.0f / (sqrt(2 * PI) * sigma)) * pow(EULER, -pow(x, 2) / (2 * pow(sigma, 2)));
}

float linearDropoff(float x) {
	return -2 * x + 2;
}

float3 randomNormal(float2 tex)
{
    float noiseX = (frac(sin(dot(tex, float2(15.8989f, 76.132f) * 1.0f)) * 46336.23745f));
    float noiseY = (frac(sin(dot(tex, float2(11.9899f, 62.223f) * 2.0f)) * 34748.34744f));
    float noiseZ = (frac(sin(dot(tex, float2(13.3238f, 63.122f) * 3.0f)) * 59998.47362f));
    return normalize(float3(noiseX, noiseY, noiseZ));
}

struct VertexShaderInput
{
	float4 Position : POSITION0;
	float2 TexCoord: TEXCOORD0;
};

struct VertexShaderOutput
{
	float4 Position : SV_POSITION;
	float2 TexCoord: TEXCOORD0;
};

VertexShaderOutput MainVS(in VertexShaderInput input)
{
	VertexShaderOutput output = (VertexShaderOutput)0;

	output.Position = input.Position;
	output.TexCoord = input.TexCoord;

	return output;
}

float4 MainPS(VertexShaderOutput input) : COLOR
{
	float4 pos = uvToProjPos(input.TexCoord);
	pos = mul(pos, InverseProjection);
	pos /= pos.w;

	float ao = 0;

	//float3 random = randomNormal(input.TexCoord);

	int actualKernelSize = 0;
	for(int i = 0; i < KERNEL_SIZE; i++)
	{
		float4 offset = float4(ssaoKernel[i], 0);
		float offsetLength = length(offset);
		//offset = reflect(offset, float4(random, 0));

		float4 samplePoint = pos + offset * 1.5f;
		samplePoint = mul(samplePoint, Projection);
		samplePoint /= samplePoint.w;
			
		float actualDepth = SAMPLE_TEXTURE(DepthTexture, saturate(projPosToUv(samplePoint.xyz)));
		actualDepth = depthToAbsolute(actualDepth);
		float sampleDepth = depthToAbsolute(samplePoint.z);

		// this is a check which aborts if the actual depth is too different from the sample depth. This is necessary
		// because otherwise you'd see a black shade around an object when another object is standing behind it but
		// is far away.
		if(actualDepth < sampleDepth - 1.3f)
		{
			continue;
		}

		++actualKernelSize;
		ao += (actualDepth > (sampleDepth - 0.001f)) * linearDropoff(offsetLength/*, 0.25f*/);
	}

	ao = map(ao, 0, actualKernelSize, 0, 2);

	return float4(ao, ao, ao, 1);
}

technique BasicColorDrawing
{
	pass P0
	{
		VertexShader = compile VS_SHADERMODEL MainVS();
		PixelShader = compile PS_SHADERMODEL MainPS();
	}
};