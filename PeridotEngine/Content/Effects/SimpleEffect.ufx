#if OPENGL
	#define SV_POSITION POSITION
	#define VS_SHADERMODEL vs_3_0
	#define PS_SHADERMODEL ps_3_0
#else
	#define VS_SHADERMODEL vs_4_0
	#define PS_SHADERMODEL ps_4_0
#endif

#include "Macros.fxh"

DECLARE_TEXTURE(Texture, 0);
DECLARE_TEXTURE(ShadowMap, 1);

matrix World;
matrix ViewProjection;
matrix TransposedInverseWorld;

float4 MixColor;

float2 TexturePosition;
float2 TextureSize;
float2 TextureRepeat;

float FogStart;
float FogEnd;
float4 FogColor;

float3 CameraPosition;

float3 LightPosition;
matrix LightWorldViewProjection;

float CalculateShadowPresence(float4 positionLightSpace)
{
    positionLightSpace /= positionLightSpace.w;
    
    float2 uv = float2(
        map(positionLightSpace.x, -1, 1, 0, 1),
        map(-positionLightSpace.y, -1, 1, 0, 1)
    );
    
    float shadowCoeff = 0;
    for (float x = -1.5; x < 1.5; x++)
    {
        for (float y = -1.5; y < 1.5; y++)
        {
            float mapDepth = 1 - SAMPLE_TEXTURE(ShadowMap, uv + float2(x, y) * 0.0015).r;
            bool inLight = (mapDepth > (positionLightSpace.z - 0.0025f))
            || uv.x > 1 || uv.x < 0 || uv.y > 1 || uv.y < 0;
            
            shadowCoeff += inLight;
        }
    }
    
    shadowCoeff /= 16;
    
    return shadowCoeff;
}

float CalculateDiffuseShading(float3 position, float3 normal) {
    float3 lightRay = position - LightPosition;
    lightRay = normalize(-lightRay);
    normal = normalize(normal);

    return clamp(dot(normal, lightRay), 0, 1);
}

struct PixelOut
{
    float4 Color : COLOR0;
    float Depth : COLOR1;
};

$uberblock SimpleEffect(vertexColorEnabled, textureEnabled, shadowsEnabled, fogEnabled, diffuseShading)
struct VertexIn$$
{
	float4 Position : POSITION0;
    $if vertexColorEnabled
        float4 Color : COLOR0;
    $endif
    $if textureEnabled
        float2 TexCoord : TEXCOORD0;
    $endif
    $if diffuseShading
        float3 Normal : NORMAL0;
    $endif
};

struct PixelIn$$
{
	float4 Position : SV_POSITION;
    float2 Depth : TEXCOORD2;

    $if vertexColorEnabled
        float4 Color : COLOR0;
    $endif
    $if textureEnabled
        float2 TexCoord : TEXCOORD0;
    $endif
    $if shadowsEnabled
        float4 PositionLightSpace : TEXCOORD1;
    $endif
    $if diffuseShading
        float3 Normal : NORMAL0; 
    $endif
    $if diffuseShading || fogEnabled
        float4 WorldPosition : POSITION1;
    $endif
};

PixelIn$$ VertexShader$$(in VertexIn$$ input)
{
    PixelIn$$ output = (PixelIn$$) 0;

    float4 worldPos = mul(input.Position, World);
	output.Position = mul(worldPos, ViewProjection);
    output.Depth = output.Position.zw;

    $if vertexColorEnabled
        output.Color = input.Color;
    $endif
    $if textureEnabled
        output.TexCoord = input.TexCoord;
    $endif
    $if shadowsEnabled
        output.PositionLightSpace = mul(input.Position, LightWorldViewProjection);
    $endif
    $if diffuseShading
        output.Normal = mul(input.Normal, (float3x3)TransposedInverseWorld);
    $endif
    $if diffuseShading || fogEnabled
        output.WorldPosition = worldPos;
    $endif

	return output;
}

PixelOut PixelShader$$(PixelIn$$ input)
{
    float4 result = MixColor;

    $if vertexColorEnabled
        result *= input.Color;
    $endif
    $if textureEnabled
        float2 internalTexCoord = frac(input.TexCoord * TextureRepeat);

        float2 texCoord = internalTexCoord;

        // random rotation for each tile for repeating textures
        /*float rand = random(floor(input.TexCoord * TextureRepeat));
        rand *= 4;
        rand = floor(rand);
        texCoord = float2(0, 0);

        // don't rotate
        texCoord.x += internalTexCoord.x * (rand == 0);
        texCoord.y += internalTexCoord.y * (rand == 0);

        // rotate ccw once
        texCoord.x += (1 - internalTexCoord.y) * (rand == 1);
        texCoord.y += (internalTexCoord.x) * (rand == 1);

        // rotate twice
        texCoord.x += (1 - internalTexCoord.x) * (rand == 2);
        texCoord.y += (1 - internalTexCoord.y) * (rand == 2);

        // rotate 3 times
        texCoord.x += (internalTexCoord.y) * (rand == 3);
        texCoord.y += (1 - internalTexCoord.x) * (rand == 3);*/

        texCoord = TexturePosition + texCoord * TextureSize;
        result *= SAMPLE_TEXTURE(Texture, texCoord);
    $endif

    float lightIntensity = 0;
    $if shadowsEnabled
        lightIntensity = CalculateShadowPresence(input.PositionLightSpace);
    $endif

    $if diffuseShading
        lightIntensity = min(lightIntensity, CalculateDiffuseShading(input.WorldPosition.xyz / input.WorldPosition.w, input.Normal));
    $endif

    $if shadowsEnabled || diffuseShading
        result = result * (0.4 + lightIntensity * 0.6);
    $endif

    $if fogEnabled
        float dist = distance(CameraPosition, input.WorldPosition);
        float fogBlend = clamp(map(dist, FogStart, FogEnd, 0, 1), 0, 1);

        result = lerp(result, FogColor, fogBlend);
    $endif

    PixelOut pout = (PixelOut)0;
    pout.Color = result;
    pout.Depth = 1 - input.Depth.x / input.Depth.y;

    return pout;

}
$endblock

// 00000 "none"
$ubertechnique SimpleEffect(false, false, false, false, false)
// 10000 vertex color
$ubertechnique SimpleEffect(true, false, false, false, false)
// 01000 textured
$ubertechnique SimpleEffect(false, true, false, false, false)
// 11000 vertex color + textured
$ubertechnique SimpleEffect(true, true, false, false, false)
// 00100 shadows
$ubertechnique SimpleEffect(false, false, true, false, false)
// 10100 vertex color + shadows
$ubertechnique SimpleEffect(true, false, true, false, false)
// 01100 textured + shadows
$ubertechnique SimpleEffect(false, true, true, false, false)
// 11100 vertex color + textured + shadows
$ubertechnique SimpleEffect(true, true, true, false, false)
// 00010 fog
$ubertechnique SimpleEffect(false, false, false, true, false)
// 10010 vertex color + fog
$ubertechnique SimpleEffect(true, false, false, true, false)
// 01010 textured + fog
$ubertechnique SimpleEffect(false, true, false, true, false)
// 11010 vertex color + textured + fog
$ubertechnique SimpleEffect(true, true, false, true, false)
// 00110 shadows + fog
$ubertechnique SimpleEffect(false, false, true, true, false)
// 10110 vertex color + shadows + fog
$ubertechnique SimpleEffect(true, false, true, true, false)
// 01110 textured + shadows + fog
$ubertechnique SimpleEffect(false, true, true, true, false)
// 11110 vertex color + textured + shadows + fog
$ubertechnique SimpleEffect(true, true, true, true, false)
// 00001 diffuse shading
$ubertechnique SimpleEffect(false, false, false, false, true)
// 10001 vertex color + diffuse shading
$ubertechnique SimpleEffect(true, false, false, false, true)
// 01001 textured + diffuse shading
$ubertechnique SimpleEffect(false, true, false, false, true)
// 11001 vertex color + textured + diffuse shading
$ubertechnique SimpleEffect(true, true, false, false, true)
// 00101 shadows + diffuse shading
$ubertechnique SimpleEffect(false, false, true, false, true)
// 10101 vertex color + shadows + diffuse shading
$ubertechnique SimpleEffect(true, false, true, false, true)
// 01101 textured + shadows + diffuse shading
$ubertechnique SimpleEffect(false, true, true, false, true)
// 11101 vertex color + textured + shadows + diffuse shading
$ubertechnique SimpleEffect(true, true, true, false, true)
// 00011 fog + diffuse shading
$ubertechnique SimpleEffect(false, false, false, true, true)
// 10011 vertex color + fog + diffuse shading
$ubertechnique SimpleEffect(true, false, false, true, true)
// 01011 textured + fog + diffuse shading
$ubertechnique SimpleEffect(false, true, false, true, true)
// 11011 vertex color + textured + fog + diffuse shading
$ubertechnique SimpleEffect(true, true, false, true, true)
// 00111 shadows + fog + diffuse shading
$ubertechnique SimpleEffect(false, false, true, true, true)
// 10111 vertex color + shadows + fog + diffuse shading
$ubertechnique SimpleEffect(true, false, true, true, true)
// 01111 textured + shadows + fog + diffuse shading
$ubertechnique SimpleEffect(false, true, true, true, true)
// 11111 vertex color + textured + shadows + fog + diffuse shading
$ubertechnique SimpleEffect(true, true, true, true, true)