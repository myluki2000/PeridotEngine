<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using PeridotEngine.ECS.Components;

namespace PeridotWindows.ECS
{
    <# for(int i = 1; i <= 10; i++) { 
		string genericTypes = string.Join(", ", Enumerable.Range(1, i).Select(x => "T" + x));
		string genericConstraints = string.Join(" ", Enumerable.Range(1, i).Select(x => "where T" + x + " : ComponentBase"));
		string componentIndicesDefinitions = string.Join("\n", Enumerable.Range(1, i).Select(x => "private int[] c" + x + "Indices = [];"));
		string componentIndicesInitializations = string.Join("\n", Enumerable.Range(1, i).Select(x => "c" + x + "Indices = new int[MatchingArchetypes.Count];"));
		string componentIndicesFillers = string.Join("\n", Enumerable.Range(1, i).Select(x => "Type t" + x + " = typeof(T" + x + ");\n" 
            + "c" + x + "Indices[i] = Array.FindIndex(archetype.ComponentTypes, x => x == t" + x + " || x.IsSubclassOf(t" + x + "));"));
		string componentIndicesGetters = string.Join("\n", Enumerable.Range(1, i)
				.Select(x => "int c" + x + "Index = c" + x + "Indices[ai];"));
		string args = string.Join(", ", Enumerable.Range(1, i).Select(x => "(T" + x + ")archetype.Components[c" + x +"Index][ei]"));
	#>

	public sealed class ComponentQuery<<#= genericTypes #>>(Ecs ecs, List<Type> includeComponents, List<Type> excludeComponents)
        : Query(ecs, includeComponents, excludeComponents)
        <#= genericConstraints #>
    {
        <#= componentIndicesDefinitions #>

        protected override void OnMatchingArchetypesUpdated()
        {
            <#= componentIndicesInitializations #>
            for (int i = 0; i < MatchingArchetypes.Count; i++)
            {
                Archetype archetype = MatchingArchetypes[i];
                <#= componentIndicesFillers #>
            }
        }

        public void ForEach(Action<uint, <#= genericTypes #>> action)
        {
            for (int ai = 0; ai < MatchingArchetypes.Count; ai++)
            {
                <#= componentIndicesGetters #>
                Archetype archetype = MatchingArchetypes[ai];

                for (int ei = 0; ei < archetype.EntityCount; ei++)
                {
                    uint entityId = archetype.Ids[ei];

                    action.Invoke(entityId, <#= args #>);
                }
            }
        }

        public void First(Action<uint, <#= genericTypes #>> action)
        {
            for (int ai = 0; ai < MatchingArchetypes.Count; ai++)
            {
				<#= componentIndicesGetters #>
                Archetype archetype = MatchingArchetypes[ai];

                for (int ei = 0; ei < archetype.EntityCount; ei++)
                {
                    uint entityId = archetype.Ids[ei];

                    action.Invoke(entityId, <#= args #>);
                    return;
                }
            }
        }
	}

    public partial class QueryBuilder {
        public ComponentQuery<<#= genericTypes #>> OnComponents<<#= genericTypes #>>() <#= genericConstraints #>
        {
            return new ComponentQuery<<#= genericTypes #>>(ecs, includeComponents, excludeComponents);
        }
    }
    <# } #>
}